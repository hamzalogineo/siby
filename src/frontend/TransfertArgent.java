/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package frontend;

import static frontend.Comptes.JDBC_DRIVER;
import static frontend.Xe.DB_URL;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Random;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JRDesignQuery;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author HAMZA
 */
public class TransfertArgent extends javax.swing.JFrame {

      static final String JDBC_DRIVER = "com.mysql.jdbc.Driver" ;  
      static final String DB_URL = "jdbc:mysql://192.168.1.117:3306/transformation" ;
      static final String USER = "root" ;
      static final String PASS = "interco" ;
      
      long mtt ;
      Integer nom_cpte ;
      Integer nom_cpte_ex ;
    
    String login ;
    // TransfertArgent
    
    static final Integer NOTIF = 1 ;
    
    public TransfertArgent() {
        initComponents();
    }
    
    public TransfertArgent(String login) {
        initComponents();
        this.login = login ;
        this.setLocationRelativeTo(null) ;
        
        
        Connection conn = null;
        Statement stmt = null;
       
       try{
      //STEP 2: Register JDBC driver
      Class.forName(JDBC_DRIVER);

      //STEP 3: Open a connection
     // System.out.println("Connecting to database...");
      
      conn = DriverManager.getConnection(DB_URL,USER,PASS);

      //STEP 4: Execute a query
      //System.out.println("Creating statement...");
      stmt = conn.createStatement();
      
      //je crai ma requete
      
          
         
      String sql ;
      
       sql= "SELECT login , nom_cpte FROM compte_b , comptes_u where type = 'oui' AND id = nom_cpte " ;
      
       ResultSet rs = stmt.executeQuery(sql);
      
      
     while(rs.next()){
        
       this.util.addItem(rs.getString("login")) ;
        
        
           
        
         
      // System.out.print(" LE code patient est Systematique "+cp.getText()); 
     }
      
    
          // code patient 
      
     
      
    
            
      //STEP 6: Clean-up environment
      
   // System.out.println("Goodbye!");
      
   
      
      //STEP 6: Clean-up environment
      rs.close();
      stmt.close();
      conn.close();
      
      
   }catch(SQLException se){
      //Handle errors for JDBC
      se.printStackTrace();
   }catch(Exception e){
      //Handle errors for Class.forName
      e.printStackTrace();
   }finally{
      //finally block used to close resources
      try{
         if(stmt!=null)
            stmt.close();
      }catch(SQLException se2){
      }// nothing we can do
      try{
         if(conn!=null)
            conn.close();
      }catch(SQLException se){
         se.printStackTrace();
      }//end finally try
   }//end try
        
       
     
     // Fin configure :
     
        
        
        
        
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        mt = new javax.swing.JFormattedTextField();
        jLabel1 = new javax.swing.JLabel();
        de = new javax.swing.JComboBox();
        util = new javax.swing.JComboBox();
        motif = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();

        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "TRANSFERT ENTRE OPERATEUR", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        mt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        mt.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        jLabel1.setText("MONTANT");

        de.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        de.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "CHOISIR DEVISE", "EURO", "DOLLAR", "FRANC CFA" }));
        de.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        util.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        util.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "CHOISIR UTILISATEUR" }));
        util.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        util.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                utilActionPerformed(evt);
            }
        });

        jLabel2.setText("MOTIF : ");

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton1.setText("VALIDER");
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jCheckBox1.setText("IMPRIMER UN BON");
        jCheckBox1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(motif, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(mt, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(de, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(util, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(40, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                    .addComponent(jCheckBox1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(148, 148, 148))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(util)
                    .addComponent(de)
                    .addComponent(mt, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE))
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(motif, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void utilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_utilActionPerformed
        // TODO add your handling code here:
        
        this.nom_cpte = 0 ;
        this.nom_cpte_ex = 0 ;
        
        String login ;
               login = this.util.getSelectedItem().toString().replaceAll("'", "''").trim() ;
               
               if("CHOISIR UTILISATEUR".equals(login)){
                   
               }else{
                   
                   Connection conn = null;
                   Statement stmt = null;
       
       try{
      //STEP 2: Register JDBC driver
      Class.forName(JDBC_DRIVER);

      //STEP 3: Open a connection
     // System.out.println("Connecting to database...");
      
      conn = DriverManager.getConnection(DB_URL,USER,PASS);

      //STEP 4: Execute a query
      //System.out.println("Creating statement...");
      stmt = conn.createStatement();
      
      //je crai ma requete
      
          
         
      String sql ;
      
       sql= "SELECT distinct id FROM comptes_u WHERE login = '"+login+"'" ;
      
       ResultSet rs = stmt.executeQuery(sql);
      
      
     while(rs.next()){
        
       this.nom_cpte = rs.getInt("id") ;
      
         
      // System.out.print(" LE code patient est Systematique "+cp.getText()); 
     }
      
    
          // code patient 
      
     
      String sql2 ;
      
       sql2 = "SELECT distinct id FROM comptes_u WHERE login = '"+this.login+"'" ;
      
       ResultSet rs2 = stmt.executeQuery(sql2);
      
      
     while(rs2.next()){
        
       this.nom_cpte_ex = rs2.getInt("id") ;
      
         
      // System.out.print(" LE code patient est Systematique "+cp.getText()); 
     }
      
    
          // code patient 
      
      
    
            
      //STEP 6: Clean-up environment
      
   // System.out.println("Goodbye!");
      
   
      
      //STEP 6: Clean-up environment
      rs.close();
      stmt.close();
      conn.close();
      
      
   }catch(SQLException se){
      //Handle errors for JDBC
      se.printStackTrace();
   }catch(Exception e){
      //Handle errors for Class.forName
      e.printStackTrace();
   }finally{
      //finally block used to close resources
      try{
         if(stmt!=null)
            stmt.close();
      }catch(SQLException se2){
      }// nothing we can do
      try{
         if(conn!=null)
            conn.close();
      }catch(SQLException se){
         se.printStackTrace();
      }//end finally try
   }//end try
        
       
     
     // Fin configure :
     
        
                   
               }
        
        
    }//GEN-LAST:event_utilActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        String mt , de , motif ;
               mt = this.mt.getText().trim() ;
               de = this.de.getSelectedItem().toString().trim() ;
               motif = this.motif.getText().trim().replaceAll("'", "''") ;
               
               try{
                   
                   this.mtt = 0 ;
                   this.mtt = Long.parseLong(mt) ;
                   
                   if(this.mtt == 0 || "CHOISIR DEVISE".equals(de) || motif.isEmpty() || "CHOISIR UTILISATEUR".equalsIgnoreCase(this.util.getSelectedItem().toString())){
                       JOptionPane.showMessageDialog(this, "Saisir le formulaire de transfert correctement svp !!! ") ;
                   }else{
                       
                       SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss") ;
                       int i = 0 ;
                       Random rx = new Random() ;
                       i = rx.nextInt() ;
                       
                       if(i < 0){
                           i = Math.abs(i) ;
                       }
                       
                       
                        Connection conn = null;
                        Statement stmt = null;
       
       try{
      //STEP 2: Register JDBC driver
      Class.forName(JDBC_DRIVER);

      //STEP 3: Open a connection
     // System.out.println("Connecting to database...");
      
      conn = DriverManager.getConnection(DB_URL,USER,PASS);
      conn.setAutoCommit(false) ;
      

      //STEP 4: Execute a query
      //System.out.println("Creating statement...");
      stmt = conn.createStatement();
      
      //je crai ma requete
      
      // destinateur :
      
          long solde_cfa_eco_d = 0 ;
          long solde_euro_d = 0 ;
          long solde_dollar_d = 0 ;
          
          
    //  recepteur :
          
          long solde_cfa_eco_ex = 0 ;
          long solde_euro_ex = 0 ;
          long solde_dollar_ex = 0 ;
         
      String sql ;
      
       sql= "SELECT solde_cfa_eco , solde_euro , solde_dollar FROM compte_b WHERE nom_cpte = "+this.nom_cpte ;
      
       ResultSet rs = stmt.executeQuery(sql);
      
      
     while(rs.next()){
        
        solde_cfa_eco_d = rs.getLong("solde_cfa_eco") ;
        solde_euro_d = rs.getLong("solde_euro") ;
        solde_dollar_d = rs.getLong("solde_dollar") ;
         
         
     }
      
    
     
     String sql2 ;
      
       sql2 = "SELECT solde_cfa_eco , solde_euro , solde_dollar FROM compte_b WHERE nom_cpte = "+this.nom_cpte_ex ;
      
       ResultSet rs2 = stmt.executeQuery(sql2);
      
      
     while(rs2.next()){
        
        solde_cfa_eco_ex = rs2.getLong("solde_cfa_eco") ;
        solde_euro_ex = rs2.getLong("solde_euro") ;
        solde_dollar_ex = rs2.getLong("solde_dollar") ;
         
         
     }
      
     
     /*
     EURO
     DOLLAR
     FRANC CFA
     */
     
     if(de.equals("EURO")){
         if(solde_euro_ex >= this.mtt){
             
             long new_solde_euro_ex = 0 ;
             long new_solde_euro_d = 0 ;
             
                  new_solde_euro_ex = (solde_euro_ex - this.mtt) ;
                  new_solde_euro_d = (solde_euro_d + this.mtt) ;
                  
                  Integer row = 0 ;
                          row = stmt.executeUpdate("update compte_b set solde_euro = "+new_solde_euro_ex+" where nom_cpte = "+this.nom_cpte_ex) ;
                  
               //  if(stmt.executeUpdate("update compte_b set solde_euro = "+new_solde_euro_d+" where nom_cpte = "+this.nom_cpte) == 1){
                      if(row == 1){
                          if(stmt.executeUpdate("insert into virement(mtt,devise,compte_nom,motif,dtec,admin,cb,notif,etat,a_cfa,a_eu,a_dol) values("
                                  +this.mtt+" , '"+de+"' , "+this.nom_cpte+" , '"+motif+"' , '"+sdf.format(new Date())+"' , '"
                                  +this.login.replaceAll("'", "''")+"' , "+i+" , "+NOTIF+" , 'NON' , "
                                  +solde_cfa_eco_ex+" , "+solde_euro_ex+" , "+solde_dollar_ex+")") == 1){
                              
                   
                              this.mtt = 0 ;
                              this.util.setSelectedItem("CHOISIR UTILISATEUR") ;
                              this.de.setSelectedItem("CHOISIR DEVISE") ;
                              this.motif.setText("");
                              mt = "" ;
                              de = "" ;
                              this.mt.setText("");
                              
                              
                              
                               if(this.jCheckBox1.isSelected()){
                                 
                                  this.jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        
       
             try{
           
           InputStream in = new FileInputStream(new File("\\\\192.168.1.117\\sibycenter\\Bon_transfert.jrxml")) ;
           JasperDesign jd = JRXmlLoader.load(in) ;
           
           String sql10 = "select * from transformation.virement , transformation.comptes_u \n " +
" where transformation.virement.cb = "+i+" AND comptes_u.id = virement.compte_nom" ;
           
           JRDesignQuery newQuery = new JRDesignQuery() ;
           newQuery.setText(sql10) ;
           jd.setQuery(newQuery) ;
           JasperReport jr = JasperCompileManager.compileReport(jd) ;
           HashMap para = new HashMap() ;
           JasperPrint j = JasperFillManager.fillReport(jr, para, DriverManager.getConnection(DB_URL,USER,PASS)) ;
           JasperViewer.viewReport(j , false) ;
          
            //  si besoin :
           
               File f = new File("E:\\reports") ;
           
                if(f.exists()){
                  if(f.setWritable(true)){
                 
                    
                   OutputStream os = new FileOutputStream(f) ;
                                    
                    JasperExportManager.exportReportToPdfStream(j, os) ;
                  
                     os.flush();
                     os.close() ;
                   
                   JOptionPane.showMessageDialog(null, "Enregistrement terminer avec succes") ;
           
                
                }
              
              }

           
           //
           
           
           
     
            
        }catch(Exception e1){
            
        }
        
         this.jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        
                               
                                 
                                 
                                 this.jCheckBox1.setSelected(false) ;
                                 
                             }else{
                                 
                                 
                                 
                             }
                              
                              
                  } 
                   
                          conn.commit();
                          
                  }else{
                          conn.rollback();
                          JOptionPane.showMessageDialog(null, "REPRENDRE OPERATION");
                      }   
         //       }
             
             
             
         }else{
             JOptionPane.showMessageDialog(this, "Solde insuffisant euro : "+solde_euro_ex);
         }
         
     }else if(de.equals("DOLLAR")){
         if(solde_dollar_ex >= this.mtt){
             
              long new_solde_euro_ex = 0 ;
              long new_solde_euro_d = 0 ;
             
                  new_solde_euro_ex = (solde_dollar_ex - this.mtt) ;
                  new_solde_euro_d = (solde_dollar_d + this.mtt) ;
                  
                  
                  Integer row = 0 ; 
                          row = stmt.executeUpdate("update compte_b set solde_dollar = "+new_solde_euro_ex+" where nom_cpte = "+this.nom_cpte_ex) ;
                  
                  
     //         if(stmt.executeUpdate("update compte_b set solde_dollar = "+new_solde_euro_d+" where nom_cpte = "+this.nom_cpte) == 1){
                      if(row == 1){
                          if(stmt.executeUpdate("insert into virement(mtt,devise,compte_nom,motif,dtec,admin,cb,notif,etat,a_cfa,a_eu,a_dol) values("
                                  +this.mtt+" , '"+de+"' , "+this.nom_cpte+" , '"+motif+"' , '"+sdf.format(new Date())+"' , '"
                                  +this.login.replaceAll("'", "''")+"' , "+i+" , "+NOTIF+" , 'NON' , "
                                  +solde_cfa_eco_ex+" , "+solde_euro_ex+" , "+solde_dollar_ex+")") == 1){
                              
                   
                              this.mtt = 0 ;
                              this.util.setSelectedItem("CHOISIR UTILISATEUR") ;
                              this.de.setSelectedItem("CHOISIR DEVISE") ;
                              this.motif.setText("");
                              mt = "" ;
                              de = "" ;
                              this.mt.setText("");
                              
                              
                              
                               if(this.jCheckBox1.isSelected()){
                                 
                                  this.jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        
       
             try{
           
           InputStream in = new FileInputStream(new File("\\\\192.168.1.117\\sibycenter\\Bon_transfert.jrxml")) ;
           JasperDesign jd = JRXmlLoader.load(in) ;
           
           String sql10 = "select * from transformation.virement , transformation.comptes_u \n " +
" where transformation.virement.cb = "+i+" AND comptes_u.id = virement.compte_nom" ;
           
           JRDesignQuery newQuery = new JRDesignQuery() ;
           newQuery.setText(sql10) ;
           jd.setQuery(newQuery) ;
           JasperReport jr = JasperCompileManager.compileReport(jd) ;
           HashMap para = new HashMap() ;
           JasperPrint j = JasperFillManager.fillReport(jr, para, DriverManager.getConnection(DB_URL,USER,PASS)) ;
           JasperViewer.viewReport(j , false) ;
          
            //  si besoin :
           
               File f = new File("E:\\reports") ;
           
                if(f.exists()){
                  if(f.setWritable(true)){
                 
                    
                   OutputStream os = new FileOutputStream(f) ;
                                    
                    JasperExportManager.exportReportToPdfStream(j, os) ;
                  
                     os.flush();
                     os.close() ;
                   
                   JOptionPane.showMessageDialog(null, "Enregistrement terminer avec succes") ;
           
                
                }
              
              }

           
           //
           
           
           
     
            
        }catch(Exception e1){
            
        }
        
         this.jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        
                               
                                 
                                 
                                 this.jCheckBox1.setSelected(false) ;
                                 
                             }else{
                                 
                                 
                                 
                             }
                              
                              
                              
                  }
                          conn.commit();
                          
                  }else{
                          conn.rollback();
                          JOptionPane.showMessageDialog(null, "REPRENDRE OPERATION") ;
                      }   
             //   }
             
             
             
         }else{
             JOptionPane.showMessageDialog(this, "Solde insuffisant dollar : "+solde_dollar_ex) ;
         }
         
     }else if(de.equals("FRANC CFA")){
         if(solde_cfa_eco_ex >= this.mtt){
             
              long new_solde_euro_ex = 0 ;
             long new_solde_euro_d = 0 ;
             
                  new_solde_euro_ex = (solde_cfa_eco_ex - this.mtt) ;
                  new_solde_euro_d = (solde_cfa_eco_d + this.mtt) ;
                  
                  Integer row = 0 ;
                          row = stmt.executeUpdate("update compte_b set solde_cfa_eco = "+new_solde_euro_ex+" where nom_cpte = "+this.nom_cpte_ex) ;
                  
   //          if(stmt.executeUpdate("update compte_b set solde_cfa_eco = "+new_solde_euro_d+" where nom_cpte = "+this.nom_cpte) == 1){
                      if(row == 1){
                          if(stmt.executeUpdate("insert into virement(mtt,devise,compte_nom,motif,dtec,admin,cb,notif,etat,a_cfa,a_eu,a_dol) values("
                                  +this.mtt+" , '"+de+"' , "+this.nom_cpte+" , '"+motif+"' , '"+sdf.format(new Date())+"' , '"
                                  +this.login.replaceAll("'", "''")+"' , "+i+" , "+NOTIF+" , 'NON' , "
                                  +solde_cfa_eco_ex+" , "+solde_euro_ex+" , "+solde_dollar_ex+")") == 1){
                              
                   
                              this.mtt = 0 ;
                              this.util.setSelectedItem("CHOISIR UTILISATEUR") ;
                              this.de.setSelectedItem("CHOISIR DEVISE") ;
                              this.motif.setText("") ;
                              mt = "" ;
                              de = "" ;
                              this.mt.setText("") ;
                              
                              
                              
                               if(this.jCheckBox1.isSelected()){
                                 
                                  this.jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        
       
             try{
           
           InputStream in = new FileInputStream(new File("\\\\192.168.1.117\\sibycenter\\Bon_transfert.jrxml")) ;
           JasperDesign jd = JRXmlLoader.load(in) ;
           
           String sql10 = "select * from transformation.virement , transformation.comptes_u \n " +
" where transformation.virement.cb = "+i+" AND comptes_u.id = virement.compte_nom" ;
           
           JRDesignQuery newQuery = new JRDesignQuery() ;
           newQuery.setText(sql10) ;
           jd.setQuery(newQuery) ;
           JasperReport jr = JasperCompileManager.compileReport(jd) ;
           HashMap para = new HashMap() ;
           JasperPrint j = JasperFillManager.fillReport(jr, para, DriverManager.getConnection(DB_URL,USER,PASS)) ;
           JasperViewer.viewReport(j , false) ;
          
            //  si besoin :
           
               File f = new File("E:\\reports") ;
           
                if(f.exists()){
                  if(f.setWritable(true)){
                 
                    
                   OutputStream os = new FileOutputStream(f) ;
                                    
                    JasperExportManager.exportReportToPdfStream(j, os) ;
                  
                     os.flush();
                     os.close() ;
                   
                   JOptionPane.showMessageDialog(null, "Enregistrement terminer avec succes") ;
           
                
                }
              
              }

           
           //
           
           
           
     
            
        }catch(Exception e1){
            
        }
        
         this.jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        
                               
                                 
                                 
                                 this.jCheckBox1.setSelected(false) ;
                                 
                             }else{
                                 
                                 
                                 
                             }
                              
                              
                              
                  }   
                          
                          conn.commit();
                          
                  }else{
                          conn.rollback();
                          JOptionPane.showMessageDialog(null, "reprendre operation");
                      }   
             //   }
             
             
             
         }else{
             JOptionPane.showMessageDialog(this, "Solde insuffisant FCFA : "+solde_cfa_eco_ex);
         }
         
     }
       
      
     
      
    
            
      //STEP 6: Clean-up environment
      
   // System.out.println("Goodbye!");
      
   
      
      //STEP 6: Clean-up environment
      rs.close();
      stmt.close();
      conn.close();
      
      
   }catch(SQLException se){
      //Handle errors for JDBC
      se.printStackTrace();
   }catch(Exception e){
      //Handle errors for Class.forName
      e.printStackTrace();
   }finally{
      //finally block used to close resources
      try{
         if(stmt!=null)
            stmt.close();
      }catch(SQLException se2){
      }// nothing we can do
      try{
         if(conn!=null)
            conn.close();
      }catch(SQLException se){
         se.printStackTrace();
      }//end finally try
   }//end try
        
       
     
     // Fin configure :
     
        
                       
                       
                       
                       
                   }
                   
               }catch(Exception e){
                   JOptionPane.showMessageDialog(this, "Saisir le mottant en chiffre uniquement !!! ") ;
               }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TransfertArgent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TransfertArgent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TransfertArgent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TransfertArgent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TransfertArgent().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox de;
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField motif;
    private javax.swing.JFormattedTextField mt;
    private javax.swing.JComboBox util;
    // End of variables declaration//GEN-END:variables
}
