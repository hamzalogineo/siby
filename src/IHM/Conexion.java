/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package IHM;

import com.sun.glass.events.KeyEvent;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;


/**
 *
 * @author HAMZA
 */
public class Conexion extends javax.swing.JFrame {

    /**
     * Creates new form Conexion
     */
    
    
    static final String JDBC_DRIVER = "com.mysql.jdbc.Driver";  
    static final String DB_URL = "jdbc:mysql://192.168.1.117:3306/transformation";
    static final String USER = "root";
    static final String PASS = "interco";
    
    
    public Conexion() {
       // this.setLocation(10, 10) ;
        initComponents();
        this.setLocationRelativeTo(null);
        //this.setExtendedState(MAXIMIZED_BOTH);
    }
    
    
     /**
     * Method for get System Name
     * @return  Host name
     */
    private static String getSystemName(){  
        try{
            InetAddress inetaddress=InetAddress.getLocalHost(); //Get LocalHost refrence
            String name = inetaddress.getHostName();   //Get Host Name
            return name;   //return Host Name
        }
        catch(Exception E){
            E.printStackTrace();  //print Exception StackTrace
            return null;
        }
    }
     
    /**
     * method to get Host IP
     * @return Host IP Address
     */
    private static String getIPAddress(){
         try{
            InetAddress inetaddress=InetAddress.getLocalHost();  //Get LocalHost refrence
            String ip = inetaddress.getHostAddress();  // Get Host IP Address
            return ip;   // return IP Address
        }
        catch(Exception E){
            E.printStackTrace();  //print Exception StackTrace
            return null;
        }
         
    }
     
    /**
     * method to get Host Mac Address
     * @return  Mac Address
     */
    private static String getMAC(){
        
         try{
            InetAddress inetaddress=InetAddress.getLocalHost(); //Get LocalHost refrence
             
            //get Network interface Refrence by InetAddress Refrence
            NetworkInterface network = NetworkInterface.getByInetAddress(inetaddress); 
            byte[] macArray = network.getHardwareAddress();  //get Harware address Array
            StringBuilder str = new StringBuilder();
             
            // Convert Array to String 
            for (int i = 0; i < macArray.length; i++) {
                    str.append(String.format("%02X%s", macArray[i], (i < macArray.length - 1) ? "-" : ""));
            }
            String macAddress=str.toString();
         
            return macAddress; //return MAc Address
        }
        catch(Exception E){
            E.printStackTrace();  //print Exception StackTrace
            return null;
        } 
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        login = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        mp = new javax.swing.JPasswordField();
        btn_con = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(51, 102, 255));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/ut1.jpg"))); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Nom d'utilisateur ");

        login.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        login.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        login.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Mot de passe ");

        mp.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        mp.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        mp.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        mp.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                mpKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                mpKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                mpKeyTyped(evt);
            }
        });

        btn_con.setBackground(new java.awt.Color(255, 153, 0));
        btn_con.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        btn_con.setForeground(new java.awt.Color(255, 255, 255));
        btn_con.setText("Connexion");
        btn_con.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        btn_con.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_con.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_conActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("AUTHENTIFICATION ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 127, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(login)
                                .addComponent(mp, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(36, 36, 36))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(48, 48, 48))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(btn_con, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(42, 42, 42)))))
                        .addGap(65, 65, 65)))
                .addGap(47, 47, 47))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(jLabel5)
                        .addGap(54, 54, 54)
                        .addComponent(jLabel3)
                        .addGap(0, 0, 0)
                        .addComponent(login, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addGap(0, 0, 0)
                        .addComponent(mp, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btn_con, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_conActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_conActionPerformed
        // TODO add your handling code here:
       
         
        // debut new :
        
            this.btn_con.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR)) ;
        
        
          char[] pass = mp.getPassword();
       
        // le couple login et mot de passe
        
          String login1 , mp1 ;
          
        //recup text du champ login
          
        login1 = login.getText().trim().replaceAll("'", "''") ;
        
        
       //  la convertion du mpc de char en string : new String(char[] password) or String.valueof(char[] password) ok ;
      //   mp = String.valueOf(pass) ;
        
        mp1 = new String(pass) ;
        
        if(login1.isEmpty() || mp1.isEmpty()){
            
            JOptionPane.showMessageDialog(null, "LE LOGIN ET LE MOT DE PASSE SONT OBLIGATOIRE") ;
            
        }else{
            
        
            
            
             Connection conn = null ;
             Statement stmt = null ;
       
       try{
      Class.forName(JDBC_DRIVER);
      conn = DriverManager.getConnection(DB_URL,USER,PASS);
      stmt = conn.createStatement();
      
      Integer vy = 0 ;
      String role = null ;
      String n_c = null ;
      String sql = null ;
      ResultSet rs = null ;
       
      
       sql = "SELECT * FROM comptes_u WHERE login = '"+login1.replaceAll("'", "''")+"' AND mp = '"+mp1.replaceAll("'", "''").trim()+"' AND status = 'activer'" ;
      
       rs = stmt.executeQuery(sql) ;
      
     while(rs.next()){
        
         n_c = rs.getString("nom_c") ;
         role = rs.getString("role") ; 

               
               vy = 1 ;
       
      }
     
        
        if(vy == 1){
            
           
            
            // debut recup :
            
          // get the runtime object associated with the current Java application
            
        Runtime runtime = Runtime.getRuntime();
         
        // get the number of processors available to the Java virtual machine
        int numberOfProcessors = runtime.availableProcessors();
          
        System.out.println("Number of processors available to this JVM: " + numberOfProcessors) ;   
        
    String command = "wmic csproduct get UUID";
    StringBuffer output = new StringBuffer();

    Process SerNumProcess = Runtime.getRuntime().exec(command);
    BufferedReader sNumReader = new BufferedReader(new InputStreamReader(SerNumProcess.getInputStream()));

    String line = "";
    while ((line = sNumReader.readLine()) != null) {
        output.append(line + "\n");
    }
    String MachineID=output.toString().substring(output.indexOf("\n"), output.length()).trim() ;
    System.out.println(MachineID) ;
        
        
        String id_post = MachineID ;
        String pos = "" ;
        String nom_ordi = "" ;
        
        String nom_post = getSystemName();
        String ip_post = getIPAddress() ;
        
            String acces = null ;
            Integer control = 0 ;
            
          //  end recup :
            
            sql = "select * from ordinateur where id_post = '"+id_post+"'" ;
            rs = stmt.executeQuery(sql) ;
            while(rs.next()){
                
                pos = rs.getString("ip_post") ;
                nom_ordi = rs.getString("nom_post") ;
                acces = rs.getString("acces") ;
                control = 1 ;
                
            }
            
            if(control == 1){
                
                if(acces.equalsIgnoreCase("OUI")){
                    
                    
if(role.equalsIgnoreCase("TP3 SIBY") || role.equalsIgnoreCase("SUPER ADMINISTRATEUR") || role.equalsIgnoreCase("ADMINISTRATEUR")){
            
            Menu mf = new Menu(login1, role, n_c, pos) ; // (login1 , role, n_c, id_post, nom_ordi, pos) ;
        
              mf.setVisible(true) ;
              this.setVisible(false) ;
              
               this.btn_con.setEnabled(false);
               
                    }else{
                         JOptionPane.showMessageDialog(null, "ACCES REFUSE POUR CE TYPE DE ROLE") ;
                    }
               
                }else if(acces.equalsIgnoreCase("NON")){
                    JOptionPane.showMessageDialog(null, "ACCES REFUSE, VEUILLEZ CONTACTE ADMINISTRATEUR") ;
                }
            
            }else if(control == 0){
                JOptionPane.showMessageDialog(null, "ACCES REFUSE, VEUILLEZ CONTACTE ADMINISTRATEUR") ;
            }
            
        }else if(vy == 0){
            JOptionPane.showMessageDialog(null, "LOGIN OU MOT DE PASSE INCORRECT") ;
        }
        
       
              
              
      rs.close();
      stmt.close();
      conn.close();
      
      
   }catch(SQLException se){
      //Handle errors for JDBC
      se.printStackTrace();
   }catch(Exception e){
      //Handle errors for Class.forName
      e.printStackTrace();
   }finally{
      //finally block used to close resources
      try{
         if(stmt!=null)
            stmt.close();
      }catch(SQLException se2){
      }// nothing we can do
      try{
         if(conn!=null)
            conn.close();
      }catch(SQLException se){
         se.printStackTrace();
      }//end finally try
   }//end try
              
              
        }
              
       this.btn_con.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR)) ;
       
       
        
        // end new : 
     
           
      
        
    }//GEN-LAST:event_btn_conActionPerformed

    private void mpKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mpKeyTyped
        // TODO add your handling code here:
        
       
        
    }//GEN-LAST:event_mpKeyTyped

    private void mpKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mpKeyPressed
        // TODO add your handling code here:
        
       
       
    }//GEN-LAST:event_mpKeyPressed

    private void mpKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mpKeyReleased
        // TODO add your handling code here:
        
        
          if(evt.getKeyCode() == KeyEvent.VK_ENTER){
           
               
               
       
        // debut new :
        
            this.btn_con.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR)) ;
        
        
          char[] pass = mp.getPassword();
       
        // le couple login et mot de passe
        
          String login1 , mp1 ;
          
        //recup text du champ login
          
        login1 = login.getText().trim().replaceAll("'", "''") ;
        
        
       //  la convertion du mpc de char en string : new String(char[] password) or String.valueof(char[] password) ok ;
      //   mp = String.valueOf(pass) ;
        
        mp1 = new String(pass) ;
        
        if(login1.isEmpty() || mp1.isEmpty()){
            
            JOptionPane.showMessageDialog(null, "LE LOGIN ET LE MOT DE PASSE SONT OBLIGATOIRE") ;
            
        }else{
            
        
            
            
             Connection conn = null ;
             Statement stmt = null ;
       
       try{
      Class.forName(JDBC_DRIVER);
      conn = DriverManager.getConnection(DB_URL,USER,PASS);
      stmt = conn.createStatement();
      
      Integer vy = 0 ;
      String role = null ;
      String n_c = null ;
      String sql = null ;
      ResultSet rs = null ;
       
      
       sql = "SELECT * FROM comptes_u WHERE login = '"+login1.replaceAll("'", "''")+"' AND mp = '"+mp1.replaceAll("'", "''").trim()+"' AND status = 'activer'" ;
      
       rs = stmt.executeQuery(sql) ;
      
     while(rs.next()){
        
         n_c = rs.getString("nom_c") ;
         role = rs.getString("role") ; 

               
               vy = 1 ;
       
      }
     
        
        if(vy == 1){
            
           
            
            // debut recup :
            
          // get the runtime object associated with the current Java application
            
        Runtime runtime = Runtime.getRuntime();
         
        // get the number of processors available to the Java virtual machine
        int numberOfProcessors = runtime.availableProcessors();
          
        System.out.println("Number of processors available to this JVM: " + numberOfProcessors) ;   
        
    String command = "wmic csproduct get UUID";
    StringBuffer output = new StringBuffer();

    Process SerNumProcess = Runtime.getRuntime().exec(command);
    BufferedReader sNumReader = new BufferedReader(new InputStreamReader(SerNumProcess.getInputStream()));

    String line = "";
    while ((line = sNumReader.readLine()) != null) {
        output.append(line + "\n");
    }
    String MachineID=output.toString().substring(output.indexOf("\n"), output.length()).trim() ;
    System.out.println(MachineID) ;
        
        
        String id_post = MachineID ;
        String pos = "" ;
        String nom_ordi = "" ;
        
        String nom_post = getSystemName();
        String ip_post = getIPAddress() ;
        
            String acces = null ;
            Integer control = 0 ;
            
          //  end recup :
            
            sql = "select * from ordinateur where id_post = '"+id_post+"'" ;
            rs = stmt.executeQuery(sql) ;
            while(rs.next()){
                
                pos = rs.getString("ip_post") ;
                nom_ordi = rs.getString("nom_post") ;
                acces = rs.getString("acces") ;
                control = 1 ;
                
            }
            
            if(control == 1){
                
                if(acces.equalsIgnoreCase("OUI")){
                    
                    
            /*
            Menu mf = new Menu(login1, role, n_c, pos) ;  // (login1 , role, n_c, id_post, nom_ordi, pos) ;
        
        
              mf.setVisible(true) ;
              this.setVisible(false) ;
              
               this.btn_con.setEnabled(false);
               
               */
                    
 if(role.equalsIgnoreCase("TP3 SIBY") || role.equalsIgnoreCase("SUPER ADMINISTRATEUR") || role.equalsIgnoreCase("ADMINISTRATEUR")){
            
            Menu mf = new Menu(login1, role, n_c, pos) ; // (login1 , role, n_c, id_post, nom_ordi, pos) ;
        
              mf.setVisible(true) ;
              this.setVisible(false) ;
              
               this.btn_con.setEnabled(false);
               
                    }else{
                         JOptionPane.showMessageDialog(null, "ACCES REFUSE POUR CE TYPE DE ROLE") ;
                    }
               
               
               
                }else if(acces.equalsIgnoreCase("NON")){
                    JOptionPane.showMessageDialog(null, "ACCES REFUSE, VEUILLEZ CONTACTE ADMINISTRATEUR") ;
                }
            
            }else if(control == 0){
                JOptionPane.showMessageDialog(null, "ACCES REFUSE, VEUILLEZ CONTACTE ADMINISTRATEUR") ;
            }
            
        }else if(vy == 0){
            JOptionPane.showMessageDialog(null, "LOGIN OU MOT DE PASSE INCORRECT") ;
        }
        
       
              
              
      rs.close();
      stmt.close();
      conn.close();
      
      
   }catch(SQLException se){
      //Handle errors for JDBC
      se.printStackTrace();
   }catch(Exception e){
      //Handle errors for Class.forName
      e.printStackTrace();
   }finally{
      //finally block used to close resources
      try{
         if(stmt!=null)
            stmt.close();
      }catch(SQLException se2){
      }// nothing we can do
      try{
         if(conn!=null)
            conn.close();
      }catch(SQLException se){
         se.printStackTrace();
      }//end finally try
   }//end try
              
              
        }
              
       this.btn_con.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR)) ;
 
          }
          
          
        
    }//GEN-LAST:event_mpKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Conexion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Conexion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Conexion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Conexion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Conexion().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_con;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField login;
    private javax.swing.JPasswordField mp;
    // End of variables declaration//GEN-END:variables
}
